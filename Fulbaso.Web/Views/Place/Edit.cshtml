@using Fulbaso.Contract
@using Fulbaso.Web
@using Fulbaso.Web.Models

@model Place

@{
    ViewBag.FormTitle = Model.Description;
}

@section Header
{
    <div class="page-header">
        <h2>
            @Model.Description
            <small>Editar</small>
        </h2>
    </div>
}

@Html.Partial("Menu", Model.Page)

@using (Html.BeginForm("Edit", "Place", FormMethod.Post, new { @class = "form-horizontal" }))
{
    <fieldset>
        <legend>General</legend>
        @Html.HiddenFor(m => m.Id)
        @Html.HiddenFor(m => m.MapUa)
        @Html.HiddenFor(m => m.MapVa)
        @Html.HiddenFor(m => m.Location.Id)
        @Html.Hidden("LocationJson")
        <div class="control-group" style="padding-top: 16px;">
            <label class="control-label" for="Description">Nombre</label>
            <div class="controls">
                @Html.TextBoxFor(m => m.Description, new { @class = "input-xxlarge", maxlength = "200", })
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Page">Nombre de la página</label>
            <div class="controls">
                @Html.TextBoxFor(m => m.Page, new { @class = "input-xxlarge", maxlength = "50", })
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Info">Descripción</label>
            <div class="controls">
                @Html.TextAreaFor(m => m.Info, new { @class = "input-xxlarge", })
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Phone">Teléfono</label>
            <div class="controls">
                @Html.TextBoxFor(m => m.Phone, new { @class = "input-large", maxlength = "200", })
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="optionsCheckboxList">Servicios</label>
            <div class="controls">
                @foreach (var s in Enum.GetValues(typeof(Service)).Cast<Service>())
                {
                    <label class="checkbox">
                        @if (Model != null && Model.Services.Contains(s))
                        {
                            <input type="checkbox" id="@s" name="@s" checked="checked" />
                        }
                        else
                        {
                            <input type="checkbox" id="@s" name="@s" />
                        }
                        @s.GetDescription()
                    </label>
                }
            </div>
        </div>
        <legend>Ubicación</legend>
        <div class="control-group">
            <label class="control-label" for="MapLocation">Dirección</label>
            <div class="controls">
                <div class="input-append" style="margin-bottom: 10px;">
                    @Html.TextBox("Address", Model.FullAddress, new { @class = "input-xxlarge", size = "16", maxlength = "200", })
                    <a id="testlocation" class="btn">Buscar</a>
                </div>
                <div class="clearAll suggestion" style="display:none; margin-bottom: 10px;">
                    <a id="suggestion" style="cursor: pointer;"></a>
                </div>
                <div id="map_canvas" style="height: 300px; width: 100%;"></div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="HowToArrive">¿Cómo llegar?</label>
            <div class="controls">
                @Html.TextAreaFor(m => m.HowToArrive, new { @class = "input-xxlarge", })
            </div>
        </div>
        <div class="form-actions">
            <button class="btn btn-primary" type="submit">Aceptar</button>
            @Html.ActionLink("Cancelar", "Admin", "Home", new { place = Model.Page, }, new { @class = "btn", })
        </div>
    </fieldset>
}

@section Scripts
{
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>
    <script>
        $(function () {
            f.map.initialize("map_canvas");
        
            @if (Model.MapUa != null && Model.MapVa != null)
            {
                <text>
                    map.marker = f.map.mark($("#Description").val(), "@Model.MapUa.ToString().Replace(",", ".")", "@Model.MapVa.ToString().Replace(",", ".")");
                    map.marker.setDraggable(true);
                    map.setCenter(map.marker.getPosition());
                    map.setZoom(15);

                    google.maps.event.addListener(map.marker, 'position_changed', localize);
                </text>
            }

            function localize(result) {
                $('#MapUa').val(map.marker.getPosition().lat().toString().replace(".", ","));
                $('#MapVa').val(map.marker.getPosition().lng().toString().replace(".", ","));

                if (result) {
                    $(".suggestion").slideDown();
                    $("#suggestion").html(result.formatted_address);
                }
                else {
                    $(".suggestion").slideUp();
                    map.geocoder.geocode({ latLng: map.marker.getPosition() }, function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            $("#Address").val(results[0].formatted_address);
                            $("#LocationJson").val(JSON.stringify(results[0].address_components));
                        }
                    });
                }
            }

            $("#testlocation").click(function () {
                f.geocode.find($("#Address").val(), $("#Description").val(), $("#LocationJson"), localize);
            });

            $("#suggestion").click(function () {
                $(".suggestion").slideUp();
                $("#Address").val($("#suggestion").html());
            });
        });
    </script>
    }