@using Fulbaso.Contract
@using Fulbaso.Web
@using Fulbaso.Web.Models

@model Place

@{
    ViewBag.FormTitle = Model.Description;
}

@section Header
{
    <div class="page-header">
        <h2>
            @Model.Description
            <small>Editar</small>
        </h2>
    </div>
}

@section StyleSheets
{
    <style>
        @@media (max-width: 979px) {
            .row .span8, .row .span4 { display: block; float: none; width: auto; }
        }
        @@media (min-width: 979px) {
            #Address { width: 350px; }
        }        
    </style>
}

@Html.Partial("Menu", Model.Page)

<div style="padding-bottom: 16px;">
    <p>Desde acá vas a poder editar la información de tu complejo.</p>
    <p>Los campos marcados con (*) son obligatorios.</p>
</div>

@using (Html.BeginForm("Edit", "Place", FormMethod.Post, new { @class = "form-horizontal" }))
{
    <div class="row">
        <div class="span8">
            @Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.MapUa)
            @Html.HiddenFor(m => m.MapVa)
            @Html.HiddenFor(m => m.Location.Id)
            @Html.Hidden("LocationJson")
            <div id="description-group" class="control-group">
                <label class="control-label" for="Description">Nombre (*)</label>
                <div class="controls">
                    @Html.TextBoxFor(m => m.Description, new { @class = "input-xlarge", maxlength = "200", tabindex = 1, })
                </div>
            </div>
            <div id="page-group" class="control-group">
                <label class="control-label" for="Page">Página <a href="#" style="font-weight: normal;" id="namehelp" rel="tooltip" data-placement="right" data-original-title="El nombre de la página es la dirección que aparecerá en la barra de direcciones del navegador dentro de nuestro sitio.">[?]</a></label>
                <div class="controls">
                    @Html.TextBoxFor(m => m.Page, new { @class = "input-xlarge", maxlength = "50", tabindex = 2, })
                    <span style="display:none" class="help-inline">Nombre en uso</span>
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="Info">Descripción</label>
                <div class="controls">
                    @Html.TextAreaFor(m => m.Info, new { @class = "input-xlarge", style = "height: 100px;", tabindex = 3, })
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="Phone">Teléfono</label>
                <div class="controls">
                    @Html.TextBoxFor(m => m.Phone, new { @class = "input-large", maxlength = "200", tabindex = 4, })
                </div>
            </div>   
            <div id="address-group" class="control-group">
                <label class="control-label" for="MapLocation">Dirección (*)</label>
                <div class="controls">
                    <div class="input-append">
                        @Html.TextBox("Address", Model.FullAddress, new { @class = "input-xlarge", size = "16", maxlength = "200", tabindex = 5, })
                        <a id="testlocation" class="btn" tabindex="6">Buscar</a>
                    </div>
                    <div class="clearAll suggestion" style="display:none; margin: 10px 0;">
                        <a id="suggestion" style="cursor: pointer;"></a>
                    </div>
                </div>
            </div>
        </div>
        <div class="span4" style="margin-bottom: 10px;">
            <div id="map_canvas" style="min-height: 310px;" ></div>
        </div>
    </div>
    <div class="control-group">
        <label class="control-label" for="HowToArrive">¿Cómo llegar?</label>
        <div class="controls">
            @Html.TextAreaFor(m => m.HowToArrive, new { @class = "input-xlarge", tabindex = 7, })
        </div>
    </div>    
    <div class="control-group">
        <label class="control-label" for="optionsCheckboxList">Servicios</label>
        <div class="controls">
            @{
                var i = 7;
            }
            @foreach (var s in Enum.GetValues(typeof(Service)).Cast<Service>())
            {
                i++;
                <label class="checkbox">
                    @if (Model != null && Model.Services.Contains(s))
                    {
                        <input type="checkbox" id="@s" name="@s" checked="checked" tabindex="@i" />
                    }
                    else
                    {
                        <input type="checkbox" id="@s" name="@s" tabindex="@i" />
                    }
                    @s.GetDescription()
                </label>
            }
        </div>
    </div>    
    <div class="form-actions">
        <button class="btn btn-primary" type="submit" tabindex="@i + 1">Guardar cambios</button>
    </div>
}

@section Scripts
{
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>
    <script>
        $(function () {
            $("#namehelp").tooltip();
            var originalPage = $("#Page").val();
            var locationChanged = false;
            f.map.initialize("map_canvas");
        
            @if (Model.MapUa != null && Model.MapVa != null)
            {
                <text>
                    map.marker = f.map.mark($("#Description").val(), "@Model.MapUa.ToString().Replace(",", ".")", "@Model.MapVa.ToString().Replace(",", ".")");
                    map.marker.setDraggable(true);
                    map.setCenter(map.marker.getPosition());
                    map.setZoom(15);

                    google.maps.event.addListener(map.marker, 'position_changed', localize);
                </text>
            }

            $(".form-actions button").click(function () {
                if ($("#page-group").hasClass("error")) {
                    window.scrollTo(0, 0);
                    return false;
                }
                
                var valid = true;
                $(".error").removeClass("error");

                if ($.trim($("#Description").val()) == "") {
                    $("#description-group").addClass("error");
                    valid = valid & false;
                }
                if ($.trim($("#LocationJson").val()) == "" && locationChanged) {
                    $("#address-group").addClass("error");
                    valid = valid & false;
                }

                if (!valid) {
                    window.scrollTo(0, 0);
                    return false;
                }
            });

            var lastResult = "";
            var checkAvailability = function () {
                $("#page-group").removeClass("error").removeClass("success");
                $("#page-group .help-inline").hide();

                if ($("#Page").val() != originalPage) {
                    $.getJSON("@Url.Action("CheckAvailability", "Place")", { page: $("#Page").val() }, function (data) {
                        lastResult = data.result;
                        
                        if (!data.isValid) {
                            $("#page-group").addClass("error");
                            $("#page-group .help-inline").fadeIn();
                        }
                    }).error(function () {
                        $("#page-group").addClass("error");
                    });
                }
            }

            $("#Page").keyup(checkAvailability);
            $("#Address").change(function () { 
                $("#LocationJson").val("");
                f.geocode.find($("#Address").val(), $("#Description").val(), $("#LocationJson"), localize);
                locationChanged = true;
            });
            function localize(result) {
                $('#MapUa').val(map.marker.getPosition().lat().toString().replace(".", ","));
                $('#MapVa').val(map.marker.getPosition().lng().toString().replace(".", ","));

                if (result) {
                    $(".suggestion").slideDown();
                    $("#suggestion").html(result.formatted_address);
                }
                else {
                    $(".suggestion").slideUp();
                    map.geocoder.geocode({ latLng: map.marker.getPosition() }, function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            $("#Address").val(results[0].formatted_address);
                            $("#LocationJson").val(JSON.stringify(results[0].address_components));
                        }
                    });
                }
            }

            $("#testlocation").click(function () {
                f.geocode.find($("#Address").val(), $("#Description").val(), $("#LocationJson"), localize);
            });

            $("#suggestion").click(function () {
                $(".suggestion").slideUp();
                $("#Address").val($("#suggestion").html());
            });
        });
    </script>
}