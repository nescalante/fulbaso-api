@using Fulbaso.Common
@using Fulbaso.Contract
@using Fulbaso.Web

@model PlacesFilter

@{
    var action = ViewContext.Controller.ValueProvider.GetValue("action").RawValue.ToString();
    var controller = ViewContext.Controller.ValueProvider.GetValue("controller").RawValue.ToString();
    var locations = ViewBag.PossibleLocations as List<string> ?? new List<string>();
    var list = locations.Where(l => !Model.Locations.Any(m => m.ToUpper().Trim() == l.ToUpper().Trim()))
        .Select(l => new { IsActive = false, Description = l })
        .Concat(Model.Locations.Select(l => new { IsActive = true, Description = l })).OrderBy(l => l.Description);
}

<h3>Búsqueda rápida</h3>
@if (list != null && list.Any())
{
    <h4>Ubicación</h4>
    <ul class="nav nav-pills">
        @foreach (var l in list)
        {
            if (l.IsActive)
            {
                <li class="active"><a title="Canchas en @l.Description" href="@Url.Action(action, controller, Model.WithoutLocation(l.Description).Route)">@l.Description</a></li>
            }
            else
            {
                <li><a title="Canchas en @l.Description" href="@Url.Action(action, controller, Model.WithLocation(l.Description).Route)">@l.Description</a></li>
            }
        }
    </ul>
}
<h4>Jugadores</h4>
<ul class="nav nav-pills">
    @foreach (var p in new[] { 5, 6, 7, 8, 9, 10, 11 })
    {
        if (Model.Players.Contains((byte)p))
        {
            <li class="active"><a title="Canchas para @p jugadores" href="@Url.Action(action, controller, Model.WithoutPlayerOption(p).Route)">@p</a></li>
        }
        else
        {
            <li><a title="Canchas para @p jugadores" href="@Url.Action(action, controller, Model.WithPlayerOption(p).Route)">@p</a></li>
        }
    }
</ul>
<h4>Tipo de suelo</h4>
<ul class="nav nav-pills">

    @foreach (var f in (IEnumerable<Fulbaso.Helpers.EntityDataObject>)ViewBag.FloorTypes)
    {
        if (Model.FloorTypes.Contains(f.Id))
        {
            <li class="active"><a title="Canchas con @f.Description.ToLower()" href="@Url.Action(action, controller, Model.WithoutFloorType(f.Id).Route)">@f</a></li>
        }
        else
        {
            <li><a title="Canchas con @f.Description.ToLower()" href="@Url.Action(action, controller, Model.WithFloorType(f.Id).Route)">@f</a></li>
        }
    }
</ul>
<h4>Características</h4>
<ul class="nav nav-pills">
    @foreach (var s in Enum.GetValues(typeof(Service)).Cast<Service>())
    {
        if (Model.Tags.Contains((byte)s))
        {
            <li class="active"><a title="Canchas con @s.GetDescription().ToLower()" href="@Url.Action(action, controller, Model.WithoutTag((byte)s).Route)">@s.GetDescription()</a></li>
        }
        else
        {
            <li><a title="Canchas con @s.GetDescription().ToLower()" href="@Url.Action(action, controller, Model.WithTag((byte)s).Route)">@s.GetDescription()</a></li>
        }
    }
    <li @(Model.IsIndoor ? "class=active" : "")><a title="Canchas techadas" href="@Url.Action(action, controller, Model.WithChangedIndoor().Route)">Techada</a></li>
    <li @(Model.IsLighted ? "class=active" : "")><a title="Canchas iluminadas" href="@Url.Action(action, controller, Model.WithChangedLighted().Route)">Iluminada</a></li>
</ul>